#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <mpi.h>
#include <omp.h>

int main(int argc, char* argv[]) {
    MPI_Init(&argc, &argv);
    int rank, size;

    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    char frase[] = "tres tristes tigres trigaban trigo por culpa del bolivar";
    int longitud = strlen(frase);
    int inicio = rank * longitud / size;
    int fin = (rank + 1) * longitud / size;

    char parte_local[1000] = "";  // Asegurar espacio suficiente para el segmento local
    bool intercambiar = true;

    #pragma omp parallel for shared(parte_local) private(intercambiar)
    for (int i = inicio; i < fin; ++i) {
        if (frase[i] == ' ' || frase[i] == '\0') {
            frase[i] = '\0';
            if (intercambiar) {
                #pragma omp critical
                {
                    snprintf(parte_local + strlen(parte_local), sizeof(parte_local) - strlen(parte_local), "%s ", &frase[inicio]);
                }
            }
            else {
                    #pragma omp critical
                     {
                    snprintf(parte_local + strlen(parte_local), sizeof(parte_local) - strlen(parte_local), "%s ", &frase[inicio]);
                     }
            }
            inicio = i + 1;
            intercambiar = !intercambiar;
        }
    }

    char resultado[1000 * size];
    MPI_Gather(parte_local, 1000, MPI_CHAR, resultado, 1000, MPI_CHAR, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Resultado: %s\n", resultado);
    }

    MPI_Finalize();
    return 0;
}
